/**
 * React 优先级车道（Lane）系统的核心定义文件
 * 采用「位运算」实现高效的优先级管理：每个比特位代表一个独立车道（优先级），
 * 多个车道可通过按位或（|）合并，通过按位与（&）判断是否包含某车道。
 * 核心原则：比特位越靠左（数值越大），优先级越低；越靠右（数值越小），优先级越高。
 */

/**
 * 总车道数量（31）
 * 选择 31 是因为：
 * 1. 避免位运算溢出（适配 32 位整数，最高位为符号位）
 * 2. 满足不同场景的优先级细分需求（同步、连续输入、过渡、空闲等）
 */
export const TotalLanes = 31;

/**
 * 空车道标记（无任何优先级）
 * 所有比特位均为 0，用于表示「没有待处理的更新」或「初始状态」
 */
export const NoLanes: Lanes = /*                        */ 0b0000000000000000000000000000000;
export const NoLane: Lane = /*                          */ 0b0000000000000000000000000000000;

// ==============================================
// 高优先级车道：用于紧急更新（如同步渲染、用户输入）
// ==============================================

/**
 *  hydration 同步车道（最高优先级）
 * 用于服务端渲染（SSR）的 hydration 过程中，需要同步执行的更新
 * 比特位：第 0 位（最右侧，数值最小，优先级最高）
 */
export const SyncHydrationLane: Lane = /*               */ 0b0000000000000000000000000000001;

/**
 * 普通同步车道
 * 用于同步更新（如 `flushSync`、类组件 `setState` 无回调的同步执行）
 * 比特位：第 1 位
 */
export const SyncLane: Lane = /*                        */ 0b0000000000000000000000000000010;
/** 同步车道的索引（用于快速定位，第 1 位对应索引 1） */
export const SyncLaneIndex: number = 1;

/**
 * hydration 连续输入车道
 * 用于 hydration 过程中，用户连续输入（如输入框打字）触发的更新
 * 比特位：第 2 位
 */
export const InputContinuousHydrationLane: Lane = /*    */ 0b0000000000000000000000000000100;

/**
 * 普通连续输入车道
 * 用于用户连续交互（如输入框、滚动、拖拽）触发的更新，优先级高于默认更新
 * 比特位：第 3 位
 */
export const InputContinuousLane: Lane = /*             */ 0b0000000000000000000000000001000;

/**
 * hydration 默认车道
 * 用于 hydration 过程中，非紧急、非输入的普通更新
 * 比特位：第 4 位
 */
export const DefaultHydrationLane: Lane = /*            */ 0b0000000000000000000000000010000;

/**
 * 普通默认车道
 * 用于常规异步更新（如 `setState` 回调、定时器触发的更新），优先级低于输入更新
 * 比特位：第 5 位
 */
export const DefaultLane: Lane = /*                     */ 0b0000000000000000000000000100000;

/**
 * 同步更新车道集合
 * 合并所有需要同步处理的高优先级车道，用于快速判断是否包含同步类更新
 */
export const SyncUpdateLanes: Lane =
  SyncLane | InputContinuousLane | DefaultLane;

/**
 * 手势车道
 * 用于手势交互（如点击、滑动）触发的更新，优先级介于输入和过渡之间
 * 比特位：第 6 位
 */
export const GestureLane: Lane = /*                     */ 0b0000000000000000000000001000000;

// ==============================================
// 中优先级车道：用于过渡更新（可中断、低紧急度）
// ==============================================

/**
 * hydration 过渡车道
 * 用于 hydration 过程中的过渡更新（如 `useTransition` 标记的低紧急度更新）
 * 比特位：第 7 位
 */
const TransitionHydrationLane: Lane = /*                */ 0b0000000000000000000000010000000;

/**
 * 过渡车道集合
 * 包含 14 个独立过渡车道（第 8-21 位），用于区分不同的 `useTransition` 更新
 * 支持多组过渡更新并行处理，避免相互阻塞
 */
const TransitionLanes: Lanes = /*                       */ 0b0000000001111111111111100000000;
/** 过渡车道 1（第 8 位） */
const TransitionLane1: Lane = /*                        */ 0b0000000000000000000000100000000;
/** 过渡车道 2（第 9 位） */
const TransitionLane2: Lane = /*                        */ 0b0000000000000000000001000000000;
/** 过渡车道 3（第 10 位） */
const TransitionLane3: Lane = /*                        */ 0b0000000000000000000010000000000;
/** 过渡车道 4（第 11 位） */
const TransitionLane4: Lane = /*                        */ 0b0000000000000000000100000000000;
/** 过渡车道 5（第 12 位） */
const TransitionLane5: Lane = /*                        */ 0b0000000000000000001000000000000;
/** 过渡车道 6（第 13 位） */
const TransitionLane6: Lane = /*                        */ 0b0000000000000000010000000000000;
/** 过渡车道 7（第 14 位） */
const TransitionLane7: Lane = /*                        */ 0b0000000000000000100000000000000;
/** 过渡车道 8（第 15 位） */
const TransitionLane8: Lane = /*                        */ 0b0000000000000001000000000000000;
/** 过渡车道 9（第 16 位） */
const TransitionLane9: Lane = /*                        */ 0b0000000000000010000000000000000;
/** 过渡车道 10（第 17 位） */
const TransitionLane10: Lane = /*                       */ 0b0000000000000100000000000000000;
/** 过渡车道 11（第 18 位） */
const TransitionLane11: Lane = /*                       */ 0b0000000000001000000000000000000;
/** 过渡车道 12（第 19 位） */
const TransitionLane12: Lane = /*                       */ 0b0000000000010000000000000000000;
/** 过渡车道 13（第 20 位） */
const TransitionLane13: Lane = /*                       */ 0b0000000000100000000000000000000;
/** 过渡车道 14（第 21 位） */
const TransitionLane14: Lane = /*                       */ 0b0000000001000000000000000000000;

// ==============================================
// 低优先级车道：用于重试、空闲时执行的更新
// ==============================================

/**
 * 重试车道集合
 * 包含 4 个独立重试车道（第 22-25 位），用于重试失败的更新（如 Suspense 数据加载重试）
 */
const RetryLanes: Lanes = /*                            */ 0b0000011110000000000000000000000;
/** 重试车道 1（第 22 位） */
const RetryLane1: Lane = /*                             */ 0b0000000010000000000000000000000;
/** 重试车道 2（第 23 位） */
const RetryLane2: Lane = /*                             */ 0b0000000100000000000000000000000;
/** 重试车道 3（第 24 位） */
const RetryLane3: Lane = /*                             */ 0b0000001000000000000000000000000;
/** 重试车道 4（第 25 位） */
const RetryLane4: Lane = /*                             */ 0b0000010000000000000000000000000;

/**
 * 任意一个重试车道（默认取 RetryLane1）
 * 用于无需区分具体重试车道的场景（如判断是否包含重试更新）
 */
export const SomeRetryLane: Lane = RetryLane1;

/**
 * 选择性 hydration 车道
 * 用于选择性 hydration（只 hydration 可见区域组件）的更新，优先级低于重试更新
 * 比特位：第 26 位
 */
export const SelectiveHydrationLane: Lane = /*          */ 0b0000100000000000000000000000000;

/**
 * 非空闲车道集合
 * 合并所有非空闲状态的车道（同步、输入、过渡、重试、选择性 hydration）
 * 用于快速判断是否包含需要立即处理的非空闲更新
 */
const NonIdleLanes: Lanes = /*                          */ 0b0000111111111111111111111111111;

/**
 * hydration 空闲车道
 * 用于 hydration 过程中，仅在主线程空闲时执行的低优先级更新
 * 比特位：第 27 位
 */
export const IdleHydrationLane: Lane = /*               */ 0b0001000000000000000000000000000;

/**
 * 普通空闲车道
 * 用于仅在主线程空闲时执行的更新（如日志上报、非紧急数据同步）
 * 比特位：第 28 位
 */
export const IdleLane: Lane = /*                        */ 0b0010000000000000000000000000000;

// ==============================================
// 最低优先级车道：用于离线、延迟执行的更新
// ==============================================

/**
 * 离线车道
 * 用于离线组件（如 `Offscreen` 包裹的隐藏组件）的更新，仅在组件可见时才会处理
 * 比特位：第 29 位
 */
export const OffscreenLane: Lane = /*                   */ 0b0100000000000000000000000000000;

/**
 * 延迟车道（最低优先级）
 * 用于延迟执行的更新（如长期缓存数据的更新），优先级最低
 * 比特位：第 30 位（最左侧非符号位）
 */
export const DeferredLane: Lane = /*                    */ 0b1000000000000000000000000000000;

// ==============================================
// 车道操作工具函数
// ==============================================

/**
 * 合并两个车道集合
 * 通过按位或（|）操作将两个车道的比特位合并，实现「同时包含两种优先级」
 *
 * @param {Lanes | Lane} a - 待合并的车道/车道集合
 * @param {Lanes | Lane} b - 待合并的车道/车道集合
 * @returns {Lanes} 合并后的车道集合
 */
export function mergeLanes(a: Lanes | Lane, b: Lanes | Lane): Lanes {
  return a | b;
}
